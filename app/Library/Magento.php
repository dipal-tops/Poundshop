<?phpnamespace App\Library;class Magento {    public $TOKEN;    public $ENDPOINT;    public $USER_NAME;    public $PASSWORD;    public $API_URL;    public $HEADERS;    public $METHOD;    public $Response_Output;    public $Error;    public $isError;    public $TOKEN_TIME;    public function __construct() {        $this->TOKEN = NULL;        $this->ENDPOINT = "";        $this->USER_NAME = NULL;        $this->PASSWORD = NULL;        $this->API_URL = NULL;        $this->HEADERS = NULL;        $this->METHOD = 'GET';        $this->Response_Output = 'json';        $this->CONTENT_TYPE = NULL;        $this->TOKEN_TIME = 300;        $this->SUCCESS_TYPE_CODE = array(            "200" => "success",            "201" => "created",            "202" => "accepted",            "204" => "no_content",        );        $this->ERROR_TYPE_CODE = array(            "400" => "bad_request",            "401" => "unauthorized",            "403" => "forbidden",            "404" => "not_found",            "405" => "method_not_allowed",            "500" => "internal_server_error",            "503" => "unavailable"        );        $this->ERROR_TYPE = NULL;        $this->CUSTOM_API_URL = NULL;        $this->LAST_REQUEST_HTTP_CODE = NULL;        $this->IS_SUCCESS_REQUEST = NULL;        $this->IS_ERROR_REQUEST = NULL;    }    public function setError($error) {        $this->isError = true;        $this->Error = $error;    }    public function getError() {        return $this->Error;    }    public function isError() {        return $this->isError;    }    public function get_token() {                $token = NULL;        $url = "V1/integration/admin/token";        $data = array("username" => $this->USER_NAME, "password" => $this->PASSWORD);                if (isset($_SESSION["magento_token"])) {            $token = $_SESSION["magento_token"];        } else {            $token_result = $this->send_request($url, $data, "POST", TRUE);            if ($token_result) {                $tokenResult = json_decode($token_result, TRUE);                if (isset($tokenResult)) {                    $_SESSION["magento_token"] = $tokenResult;                    $token = $tokenResult;                                    }                            }        }        return $token;    }    public function send_request($url = NULL, $req_data = array(), $custom_method = NULL, $is_token = FALSE) {        $this->ERROR_TYPE = NULL;        $this->isError = false;        $this->Error = NULL;        $this->IS_SUCCESS_REQUEST = NULL;        $this->IS_ERROR_REQUEST = NULL;        $HEADERS = NULL;        if (!$is_token && $this->TOKEN=='') {            $this->TOKEN = $this->get_token();        }                $ServiceUrl = "";        if ($url) {            $ServiceUrl = $this->ENDPOINT . $url;        } elseif ($this->CUSTOM_API_URL) {            $ServiceUrl = $this->CUSTOM_API_URL;        }                $custom_method = $custom_method ? $custom_method : $this->METHOD;                if ($req_data && $custom_method == "GET") {            $Request_Query = $this->build_request_data($req_data);            if ($Request_Query != "") {                $Request_Query = "?" . $Request_Query;                $ServiceUrl = $ServiceUrl . $Request_Query;            }        }        // if($url!='V1/integration/admin/token')        // {        //     echo $ServiceUrl.'<br/>';        //     echo $this->TOKEN;exit;                    // }        if (strtolower($this->Response_Output) == "json" && empty($this->HEADERS)) {            $HEADERS[] = 'Accept: application/json';            $HEADERS[] = 'Content-Type: application/json';            $HEADERS[] = 'Content-Length: ' . (empty($req_data) ? 0 : strlen(json_encode($req_data)));            $HEADERS[] = 'Authorization: bearer ' . $this->TOKEN;        } else {            $HEADERS = $this->HEADERS;        }                $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $ServiceUrl);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_HTTPHEADER, $HEADERS);                    //// Set Method For Every Request        if (!empty($req_data) && $custom_method == "POST") {            curl_setopt($ch, CURLOPT_POST, true);            if (isset($req_data)) {                curl_setopt($ch, CURLOPT_ENCODING, '');                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($req_data));            }        }        //// Set Method For Every Request        if (!empty($req_data) && $custom_method == "PUT") {            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");            if (isset($req_data)) {                curl_setopt($ch, CURLOPT_ENCODING, '');                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($req_data));            }        } else if ($custom_method == 'FILE_TRANSFER' && !empty($req_data)) {            $filetoUpload = $req_data["file"];            $handle = fopen($filetoUpload, "r");            $fileLen = filesize($filetoUpload);            curl_setopt($ch, CURLOPT_INFILE, $handle);            curl_setopt($ch, CURLOPT_INFILESIZE, $fileLen);            curl_setopt($ch, CURLOPT_UPLOAD, true);        } else {            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $custom_method);        }        $http_result = curl_exec($ch);                $http_info = curl_getinfo($ch);        $this->LAST_REQUEST_HTTP_CODE = (string) $http_info["http_code"];        if (isset($http_info["http_code"]) >= 400) {            $this->ERROR_TYPE = isset($this->ERROR_TYPE_CODE[$http_info["http_code"]]) ? $this->ERROR_TYPE_CODE[$http_info["http_code"]] : NULL;            $this->setError($this->ERROR_TYPE);        }        if (isset($this->SUCCESS_TYPE_CODE[$this->LAST_REQUEST_HTTP_CODE])) {            $this->IS_SUCCESS_REQUEST = TRUE;        } elseif (isset($this->ERROR_TYPE_CODE[$this->LAST_REQUEST_HTTP_CODE])) {            $this->IS_ERROR_REQUEST = TRUE;            $this->isError = TRUE;        }        curl_close($ch);        return $http_result;    }    public function build_request_data($data) {        return $this->ConvertToBuildQuery($data);    }    function ConvertToBuildQuery($array, $qs = false) {        $parts = array();        if ($qs) {            $parts[] = $qs;        }        foreach ($array as $key => $value) {            if (is_array($value)) {                foreach ($value as $value2) {                    $parts[] = http_build_query(array($key => $value2));                }            } else {                $parts[] = http_build_query(array($key => $value));            }        }        return join('&', $parts);    }}